import json
import pandas as pd
import re

def flatten_json(nested_json, prefix=""):
    """
    Recursively flattens a nested JSON dictionary.
    """
    flat_dict = {}
    for key, value in nested_json.items():
        full_key = f"{prefix}.{key}" if prefix else key
        if isinstance(value, dict):
            flat_dict.update(flatten_json(value, full_key))
        else:
            flat_dict[full_key] = value
    return flat_dict

def parse_transaction_file(input_file, output_file):
    data = []
    transaction_type = None
    create_time = None
    json_block = []
    inside_json = False

    with open(input_file, "r", encoding="utf-8") as file:
        lines = file.readlines()

    for line in lines:
        line = line.strip()

        # Identify transaction type
        if re.match(r"^\w+[-_]\w+[-_]\w+[-_]\w+$", line):
            transaction_type = line  # Store transaction type
            continue

        # Identify CreateTime
        if line.startswith("CreateTime:"):
            create_time = line.split(":", 1)[1].strip()
            continue

        # Detect start of JSON
        if line.startswith("{"):
            inside_json = True
            json_block = [line]
            continue

        # If inside a JSON block, append lines until JSON is complete
        if inside_json:
            json_block.append(line)
            if line.endswith("}"):  # JSON ends
                inside_json = False
                json_string = " ".join(json_block)  # Merge lines into a single JSON string

                # Parse JSON
                try:
                    json_data = json.loads(json_string)
                    flat_data = flatten_json(json_data)  # Flatten nested JSON
                    for key, value in flat_data.items():
                        data.append([transaction_type, create_time, key, value])
                except json.JSONDecodeError:
                    print(f"Skipping invalid JSON: {json_string}")

    # Create DataFrame
    df = pd.DataFrame(data, columns=["Transaction Type", "CreateTime", "Key", "Value"])

    # Save to Excel
    df.to_excel(output_file, index=False)
    print(f"Data successfully saved to {output_file}")

# Example usage
parse_transaction_file("code.txt", "output.xlsx")
