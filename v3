import pandas as pd
import re

def parse_transaction_file(input_file, output_file):
    """
    Parses a text file containing transaction data and saves extracted information to an Excel file.
    """
    data = []
    transaction_type = None
    create_time = None

    print(f"🔍 Reading file: {input_file}")

    with open(input_file, "r", encoding="utf-8") as file:
        lines = file.readlines()

    print(f"📄 Total lines in file: {len(lines)}")

    for line_num, line in enumerate(lines, start=1):
        line = line.strip()

        # Identify Transaction Type
        if re.match(r"^\w+[-_]\w+[-_]\w+[-_]\w+$", line):
            transaction_type = line
            print(f"\n📌 Line {line_num}: Found transaction type → {transaction_type}")
            continue

        # Identify CreateTime
        if line.startswith("CreateTime:"):
            create_time = line.split(":", 1)[1].strip()
            print(f"⏳ Line {line_num}: Found CreateTime → {create_time}")
            continue

        # Process Key-Value Pairs (Manual Parsing)
        if line.startswith("{") and line.endswith("}"):
            line = line[1:-1].strip()  # Remove { and }
            key_value_pairs = re.findall(r'"([^"]+)"\s*:\s*"([^"]*)"', line)  # Extract key-value pairs

            if not key_value_pairs:
                print(f"⚠️ Line {line_num}: No key-value pairs found, check format!")
                continue

            for key, value in key_value_pairs:
                print(f"✅ Parsed: {transaction_type} | {create_time} | {key} | {value}")  # Debugging
                data.append([transaction_type, create_time, key, value])

    # Check if any data was extracted
    if not data:
        print("\n❌ No valid transactions found. Check the input file for errors.")
        return

    # Create DataFrame
    df = pd.DataFrame(data, columns=["Transaction Type", "CreateTime", "Key", "Value"])

    # Save to Excel
    df.to_excel(output_file, index=False)
    print(f"\n✅ Data successfully saved to {output_file} with {len(data)} records.")

# Example usage
parse_transaction_file("code.txt", "output.xlsx")
